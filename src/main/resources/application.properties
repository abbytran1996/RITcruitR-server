# ===============================
# = DATA SOURCE
# ===============================

#We are using port 8181, not 8080
server.port=8181

# Set here configurations for the database connection
spring.datasource.platform=mariadb
spring.datasource.driverClassName=org.mariadb.jdbc.Driver

# Connection url for the database "tmcs"
#AWS
spring.datasource.url = jdbc:mariadb://recruitrdb.ctgdmu72hbdw.us-east-2.rds.amazonaws.com:3306/tmcs?useSSL=false&createDatabaseIfNotExist=true
#LOCAL
#spring.datasource.url = jdbc:mariadb://localhost:3306/tmcs?useSSL=false&createDatabaseIfNotExist=true

# Username and password
#AWS
spring.datasource.username = recruitr
spring.datasource.password = StudentCareers1
#LOCAL
#spring.datasource.username = root
#spring.datasource.password = [your local mysql root password]

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.jpa.hibernate.cache.use_structured_entries=true

# ===============================
# = LOGGING
# ===============================

logging.level.root=INFO

# ===============================
# = CONFIGURATION
# ===============================

addTestData=true
